/**
 * @author Ferdinand K. Yeke
 *
 */

import java.util.Random;
import java.util.Queue;
import java.util.LinkedList;
public class PassengerClass 
implements PassengerInterface {

	Queue<String> passengerQueue = new LinkedList<String>(); //Uses the Queue class while using the linked list data structure as reference.
	Queue<String> ticketQueue = new LinkedList<String>(); //Uses the Queue class while using the linked list data structure as reference.
	//LinkedList<String> conductor = new LinkedList(); //Checks every passenger from FIRST to LAST.
	Random rand = new Random();
	
	private String Name;
	private String[] ticketGen = {"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S"
									,"T","U","V","W","X","Y","Z","1","2","3","4","5","6","7","8","9","0"};
	private String ticket;
	private int randTicketIndex;
	
	private String namesInital;
	private int firstInitalGen;
	private int lastInitalGen;
	
	private String firstInitalIndex;
	private String lastInitalIndex;
	
	private String[] firstInital = {"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S"
			,"T","U","V","W","X","Y","Z"};
	private String[] lastInital = {"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S"
			,"T","U","V","W","X","Y","Z"}; 
	private int passengerAmount = 0;
	
	private int count = 0;
	
	
	//Default Constructor
	public PassengerClass()
	{
		this.Name = "";
	}
	
	//Preferred Constructor
	public PassengerClass(String Name)
	{
		this.Name = Name;
	}
	
	@Override
	/**
	 * @param Name adds the Passenger's name to the passengerQueue.
	 */
	public void addPassenger(String Name) {
		// TODO Auto-generated method stub
		this.Name = Name;
		passengerQueue.add(Name); //enqueues the Passenger
	}
	/**
	 * 
	 * @return passenger's name from the queue.
	 */
	public String getPassenger()
	{
		return passengerQueue.peek();
	}
	
	
	@Override
	/**
	 * removes a passenger. If the queue is empty, an EmptyQueueExcecption is thrown.
	 * Otherwise, remove the passenger from the queue.
	 */
	public void removePassenger() throws EmptyQueueException{
		// TODO Auto-generated method stub
	
		if(passengerQueue.peek().isEmpty())
		{
			throw new EmptyQueueException("There are no passengers!");
		}
		
		else
		{
			passengerQueue.remove();
		}
		
	}

	@Override
	/**
	 * Gets all the passengers in the queue (should be used in a loop in a main class if to do this) throws
	 * an EmptyQueueException if the passengerQueue is empty, otherwise, remove every other passenger.
	 */
	public String getAllPassengers() throws EmptyQueueException {
		// TODO Auto-generated method stub
		if(passengerQueue.element().isEmpty())
		{
			throw new EmptyQueueException("There are no passengers!");
		}
		
		else
		{
			//conductor.descendingIterator();
			return passengerQueue.element();
		}
	}

	@Override
	/**
	 * @param ticket gets randomly generated by the ticketGen array values.
	 */
	public void addTicket(String ticket) {
		// TODO Auto-generated method stub
		Random rand = new Random();
		int i = 0;
		this.ticket = ticket;
		while(i < 14)
		{
		randTicketIndex = rand.nextInt(ticketGen.length);
		ticket = ticket+""+ticketGen[randTicketIndex];
		i++;
		}
		
		if(ticket.length() == 14)
		{
			ticketQueue.add(ticket);//Enqueues the ticket for the passenger.
		}
	
	}
	
	/*
	@Override
	
	public void removeTicket() {
		// TODO Auto-generated method stub
		//Dummy value for method. Not Final
		String N = null;
	}
	*/
	@Override
	/**
	 * @return ticket
	 */
	public String getTickets() {
		// TODO Auto-generated method stub
		return ticket;
	}
	
	/**
	 * 
	 * @param passengerAmount gets a passenger's name generated by the first initial and last initial array variables.
	 * This also generates the Passenger's name by initials.
	 * @return passengerAmount just returns the passenger amount inputed by user.
	 */
	
	public int genPassengerNames(int passengerAmount)
	{
		this.passengerAmount = passengerAmount;
		//int temp = passengerAmount;
		
		if(count == passengerAmount)
		{
			System.out.println("All passengers aboard!");
			return passengerAmount;
		}
		
		else 
		{
			firstInitalGen = rand.nextInt(firstInital.length);
			lastInitalGen = rand.nextInt(lastInital.length);
			
			firstInitalIndex = firstInital[firstInitalGen];
			lastInitalIndex = lastInital[lastInitalGen];
			
			namesInital = firstInitalIndex +"."+lastInitalIndex;
			
			addPassenger(namesInital);
			System.out.println("passengers still getting aboard...");
			count++;
			return genPassengerNames(passengerAmount);
			
		}
		
		
	}

}//Class ends here
